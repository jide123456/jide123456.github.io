<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记得的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-25T13:52:43.459Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>jide</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次webpack构建优化</title>
    <link href="http://yoursite.com/2018/04/22/buileOptimize/"/>
    <id>http://yoursite.com/2018/04/22/buileOptimize/</id>
    <published>2018-04-22T02:47:50.000Z</published>
    <updated>2018-04-25T13:52:43.459Z</updated>
    
    <content type="html"><![CDATA[<p>一次偶然的机会，我知道了webpack有很多可视化工具，可以帮助你分析应用的依赖图表，找出不好的地方，让你去优化他们。</p><a id="more"></a> <h2 id="webpack-Analyze"><a href="#webpack-Analyze" class="headerlink" title="webpack Analyze"></a>webpack Analyze</h2><p>我用的是webpack的官方分析工具<a href="https://webpack.github.io/analyse/" target="_blank" rel="noopener">Analyze</a>，使用它之前，你需要先生成一份<strong>包含关于模块的统计数据的json文件</strong>，你可以参照<a href="https://doc.webpack-china.org/api/stats/#src/components/Sidebar/Sidebar.jsx" target="_blank" rel="noopener">这篇文档</a>，如果你使用的是Node APi，那么你可能需要参考<a href="https://doc.webpack-china.org/api/node/#stats-%E5%AF%B9%E8%B1%A1-stats-object-" target="_blank" rel="noopener">这篇文档</a>。</p><p>将生成好的json文件上传至Analyze，你会看到如下图所示界面。这是你应用的构建概览。你可以在Modules，Chunks，Assets目录里看见更详细的报告，也可以在Hints目录里查看优化提示。</p><img src="/2018/04/22/buileOptimize/01.jpg" title="Analyze Home"><h2 id="大量module被多个chunks依赖"><a href="#大量module被多个chunks依赖" class="headerlink" title="大量module被多个chunks依赖"></a>大量module被多个chunks依赖</h2><p>让我们回到主题，点击Hints我发现，在我的应用中有很多个module被多个chunk依赖，这使得我chunk的尺寸比预期要大，会使页面访问速度变慢。我感到很奇怪？我的项目是用Vue-cli生成的，项目里配置了webpack的CommonsChunkPlugin插件，按理说这些被多个chunk依赖的module是会被打包进一个公共文件才对的。为什么这些module没有被打包进公共文件？问题出在哪？</p><img src="/2018/04/22/buileOptimize/02.jpg" title="大量module被多个chunks依赖"><h2 id="问题出在哪呢？"><a href="#问题出在哪呢？" class="headerlink" title="问题出在哪呢？"></a>问题出在哪呢？</h2><p>首先我猜测，可能是CommonsChunkPlugin插件配置不对，我依次尝试了<a href="https://doc.webpack-china.org/plugins/commons-chunk-plugin/" target="_blank" rel="noopener">官方文档</a>上的配置案例，问题任然存在。看来不是配置的问题。那问题出在哪呢？我整个人有点斯巴达，看样子又得去看源码了。</p><p>在看源码之前，我灵光一闪，有了新的发现。</p><p>我在配置代码里加了一行代码，打印资源路径。发现——我通过代码分割功能引入的子chunk的路径并没有出被打印在控制台中，也就是说，<strong>CommonsChunkPlugin不会去提取被分割的子chunk中的公共文件</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">'vendor'</span>,</span><br><span class="line">  minChunks: <span class="function"><span class="keyword">function</span> (<span class="params">module, count</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">module</span>.resource) <span class="comment">// 打印资源路径</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="built_in">module</span>.resource &amp;&amp;</span><br><span class="line">      /\.js$/.test(<span class="built_in">module</span>.resource) &amp;&amp;</span><br><span class="line">      <span class="built_in">module</span>.resource.indexOf(</span><br><span class="line">        path.join(__dirname, <span class="string">'../node_modules'</span>)</span><br><span class="line">      ) === <span class="number">0</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>得出的这个令我很兴奋，我马上停用掉代码分割功能，来验证我的想法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过代码分割功能异步引入的页面组件</span></span><br><span class="line"><span class="keyword">const</span> pageOne = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/page/pageOne'</span> <span class="comment">/* webpackChunkName: "pageOne" */</span>)</span><br><span class="line"><span class="keyword">const</span> pageTwo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/page/pageTwo'</span> <span class="comment">/* webpackChunkName: "pageTwo" */</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停用代码分割功能</span></span><br><span class="line"><span class="keyword">import</span> pageOne <span class="keyword">from</span> <span class="string">'@/page/pageOne'</span></span><br><span class="line"><span class="keyword">import</span> pageTwo <span class="keyword">from</span> <span class="string">'@/page/pageTwo'</span></span><br></pre></td></tr></table></figure><p>验证的结果同我的猜想一样。</p><h2 id="优化结果对比"><a href="#优化结果对比" class="headerlink" title="优化结果对比"></a>优化结果对比</h2><p>找到原因问题就好解决了，既然<strong>CommonsChunkPlugin不会去提取被分割的子chunk中的公共文件</strong>，那我就手动将他们提取到一个公共文件里面去。</p><p>放一张优化前后的构建对比图。</p><img src="/2018/04/22/buileOptimize/03.jpg" title="优化效果对比"><p>从图中可以看到，文件尺寸平均减少了50kb，画红线的三个文件更是减少了100kb。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一次偶然的机会，我知道了webpack有很多可视化工具，可以帮助你分析应用的依赖图表，找出不好的地方，让你去优化他们。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="优化" scheme="http://yoursite.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://yoursite.com/2018/04/15/helloWorld/"/>
    <id>http://yoursite.com/2018/04/15/helloWorld/</id>
    <published>2018-04-15T07:52:08.000Z</published>
    <updated>2018-04-25T13:53:40.256Z</updated>
    
    <content type="html"><![CDATA[<p>去年买的搬瓦工的服务器，因为到期了太久没有续费，已经被厂商关闭了，部署在上面的博客自然也访问不到了。也没有心思把它再重新搭建起来，天知道我当初搭建它时查了多少文章。[笑哭]</p><p>但话又说回来了，博客是coder的脸面，没有的话又有点说不过去，只好另辟蹊径，找到了Hexo。</p><a id="more"></a> <h2 id="说说Hexo"><a href="#说说Hexo" class="headerlink" title="说说Hexo"></a>说说Hexo</h2><p>Hexo的使用体验是简单 + 愉快的，基本上跟着<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方教程</a>敲一遍就能上手，书写方面采用的是MarkDown，学起来也很快。部署方面也很简单，将写好的文章传到服务器上就可以了（就你废话多）。这里我还参考了<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">知乎的一篇文章</a>。</p><p>从想法萌生到新博客诞生，整个过程算下来不到2个小时，还是挺快的。让人心情预愉悦^ ^</p><p>今天就先到这了~</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年买的搬瓦工的服务器，因为到期了太久没有续费，已经被厂商关闭了，部署在上面的博客自然也访问不到了。也没有心思把它再重新搭建起来，天知道我当初搭建它时查了多少文章。[笑哭]&lt;/p&gt;
&lt;p&gt;但话又说回来了，博客是coder的脸面，没有的话又有点说不过去，只好另辟蹊径，找到了Hexo。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
